name: Python Linter

on:
  workflow_run:
    workflows: ["Python formatter"] # Run only after the 'Python Formatter' workflow completes
    types:
      - completed # Trigger when the formatter workflow finishes

jobs:
  lint:

    runs-on: ubuntu-latest

    steps:
    # Step 1: Check out the current repository so that the files are available to the workflow
    - uses: actions/checkout@v4
    
    # Step 2: Set up Python version 3.x for the workflow environment
    - name: Set up Python 3.x
      uses: actions/setup-python@v1
      with:
        python-version: 3.x
    
    # Step 3: Install `flake8`, a Python linter, by upgrading pip and then installing `flake8`
    - name: Install flake8
      run: |
        python -m pip install --upgrade pip  # Upgrade pip to the latest version
        pip install flake8  # Install flake8 linter
    
    # Step 4: Set up flake8 annotations (this is optional, to annotate lint issues in the pull request)
    - name: Setup flake8 annotations
      uses: rbialon/flake8-annotations@v1
    
    # Step 5: Run flake8 linter with two sets of rules
    - name: Lint with flake8
      run: |
        # First run: Focus on catching critical errors related to syntax and undefined names
        # This command checks for Python syntax errors (E9) and issues related to undefined names (F63, F7, F82)
        # The build will stop and fail if any of these critical errors are found.
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

        # Second run: Check for general linting issues but ignore some rules
        # --ignore=C901: Ignore complexity-related issues
        # --ignore=W503: Ignore line break before binary operator
        # --ignore=E203: Ignore whitespace before ':'
        # This will fail the build if there are other linting issues, except the ignored ones.
        flake8 . --count --max-complexity=10 --max-line-length=150 --ignore=C901,W503,E203 --statistics
